name: Career OS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: careeros_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
    
    - name: Run backend tests
      run: |
        cd career-os-backend
        mvn clean test -Dspring.profiles.active=test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/careeros_test
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: test
        SPRING_REDIS_HOST: localhost
        SPRING_REDIS_PORT: 6379
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend Tests
        path: career-os-backend/target/surefire-reports/*.xml
        reporter: java-junit
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: career-os-backend/target/site/jacoco/jacoco.xml
        flags: backend

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: career-os-frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd career-os-frontend
        npm ci
    
    - name: Run ESLint
      run: |
        cd career-os-frontend
        npm run lint
    
    - name: Run type checking
      run: |
        cd career-os-frontend
        npm run type-check
    
    - name: Run frontend tests
      run: |
        cd career-os-frontend
        npm run test:ci
    
    - name: Run build test
      run: |
        cd career-os-frontend
        npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: career-os-frontend/coverage/lcov.info
        flags: frontend

  test-mobile:
    name: Test Mobile
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'
    
    - name: Install dependencies
      run: |
        cd career-os-mobile
        flutter pub get
    
    - name: Run code analysis
      run: |
        cd career-os-mobile
        flutter analyze
    
    - name: Run tests
      run: |
        cd career-os-mobile
        flutter test --coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: career-os-mobile/coverage/lcov.info
        flags: mobile
    
    - name: Build APK (Debug)
      run: |
        cd career-os-mobile
        flutter build apk --debug

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'

  build-images:
    name: Build Docker Images
    needs: [test-backend, test-frontend, test-mobile, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/career-os-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./career-os-backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/career-os-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./career-os-frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: [build-images]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes (Staging)
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          career-os-backend/k8s/namespace.yaml
          career-os-backend/k8s/configmap.yaml
          career-os-backend/k8s/deployment.yaml
          career-os-backend/k8s/service.yaml
          career-os-backend/k8s/ingress.yaml
        images: |
          ${{ secrets.DOCKER_USERNAME }}/career-os-backend:develop
          ${{ secrets.DOCKER_USERNAME }}/career-os-frontend:develop
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
        namespace: career-os-staging

  deploy-production:
    name: Deploy to Production
    needs: [build-images]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes (Production)
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          career-os-backend/k8s/namespace.yaml
          career-os-backend/k8s/configmap.yaml
          career-os-backend/k8s/secret.yaml
          career-os-backend/k8s/deployment.yaml
          career-os-backend/k8s/service.yaml
          career-os-backend/k8s/ingress.yaml
          career-os-backend/k8s/hpa.yaml
        images: |
          ${{ secrets.DOCKER_USERNAME }}/career-os-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/career-os-frontend:latest
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
        namespace: career-os
    
    - name: Verify deployment
      run: |
        kubectl get pods -n career-os
        kubectl get services -n career-os
        kubectl get ingress -n career-os
      env:
        KUBECONFIG: ${{ secrets.KUBE_CONFIG }}
    
    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/career-os-backend -n career-os
        kubectl wait --for=condition=available --timeout=300s deployment/career-os-frontend -n career-os
        
        # Run basic health checks
        curl -f https://api.career-os.com/health || exit 1
        curl -f https://career-os.com || exit 1
      env:
        KUBECONFIG: ${{ secrets.KUBE_CONFIG }}

  notify:
    name: Notify Team
    needs: [deploy-production, deploy-staging]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ Career OS deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack on Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ Career OS deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
