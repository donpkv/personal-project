version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: career-os-postgres
    environment:
      POSTGRES_DB: career_os
      POSTGRES_USER: career_os_user
      POSTGRES_PASSWORD: career_os_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - career-os-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U career_os_user -d career_os"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache
  redis:
    image: redis:7-alpine
    container_name: career-os-redis
    command: redis-server --appendonly yes --requirepass redis_pass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - career-os-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Message Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: career-os-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    networks:
      - career-os-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: career-os-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - career-os-network
    restart: unless-stopped

  # Backend Service
  backend:
    build:
      context: ./career-os-backend
      dockerfile: Dockerfile
    container_name: career-os-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: career_os
      DB_USERNAME: career_os_user
      DB_PASSWORD: career_os_pass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_pass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JWT_SECRET: career-os-super-secret-key-change-in-production
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your-openai-api-key}
    ports:
      - "8080:8080"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - career-os-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Service
  frontend:
    build:
      context: ./career-os-frontend
      dockerfile: Dockerfile
    container_name: career-os-frontend
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080/api/v1
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      NODE_ENV: production
    ports:
      - "3000:3000"
    networks:
      - career-os-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: career-os-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - career-os-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: career-os-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - career-os-network
    restart: unless-stopped

  # Development Tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: career-os-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@career-os.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - career-os-network
    restart: unless-stopped
    profiles:
      - dev

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: career-os-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_pass
    ports:
      - "8081:8081"
    networks:
      - career-os-network
    restart: unless-stopped
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  career-os-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
